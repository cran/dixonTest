
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R ist freie Software und kommt OHNE JEGLICHE GARANTIE.
Sie sind eingeladen, es unter bestimmten Bedingungen weiter zu verbreiten.
Tippen Sie 'license()' or 'licence()' für Details dazu.

R ist ein Gemeinschaftsprojekt mit vielen Beitragenden.
Tippen Sie 'contributors()' für mehr Information und 'citation()',
um zu erfahren, wie R oder R packages in Publikationen zitiert werden können.

Tippen Sie 'demo()' für einige Demos, 'help()' für on-line Hilfe, oder
'help.start()' für eine HTML Browserschnittstelle zur Hilfe.
Tippen Sie 'q()', um R zu verlassen.

> ####	d|ensity
> ####	p|robability (cumulative)
> ####	q|uantile
> ####	r|andom number generation
> ####
> ####	Functions for  ``d/p/q/r''
> require(dixonTest)
> 
> .ptime <- proc.time()
> F <- FALSE
> T <- TRUE
> 
> options(warn = 2)
> ##      ======== No warnings, unless explicitly asserted via
> assertWarning <- tools::assertWarning
> 
> as.nan <- function(x) { x[is.na(x) & !is.nan(x)] <- NaN ; x }
> ###-- these are identical in ./arith-true.R ["fixme": use source(..)]
> opt.conformance <- 0
> Meps <- .Machine $ double.eps
> xMax <- .Machine $ double.xmax
> options(rErr.eps = 1e-30)
> rErr <- function(approx, true, eps = getOption("rErr.eps", 1e-30))
+ {
+     ifelse(Mod(true) >= eps,
+ 	   1 - approx / true, # relative error
+ 	   true - approx)     # absolute error (e.g. when true=0)
+ }
> ## Numerical equality: Here want "rel.error" almost always:
> All.eq <- function(x,y) {
+     all.equal.numeric(x,y, tolerance = 64*.Machine$double.eps,
+                       scale = max(0, mean(abs(x), na.rm=TRUE)))
+ }
> if(!interactive())
+     set.seed(123)
> 
> ## The prefixes of ALL the PDQ & R functions
> PDQRinteg <- c("dixon")
> PDQR <- c(PDQRinteg)
> ##PQonly <- c("tukey")
> 
> ###--- Discrete Distributions --- Consistency Checks  pZZ = cumsum(dZZ)
> 
> ##for(pre in PDQRinteg) { n <- paste("d",pre,sep=""); cat(n,": "); str(get(n))}
> 
> ### must safely stop
> i <- c( 2, 0, 2, 1, 4)
> j <- c( 1, 1, 3, 0, 3)
> n <- c(31, 7, 7, 7, 7)
> 
> options(try.outFile = stdout())
> for (k in 1:5) {
+     try(qdixon(
+             p = 0.1,
+             n = n[k],
+             i = i[k],
+             j = j[k]
+         ),
+         silent = FALSE)
+ }
Error in qdixon(p = 0.1, n = n[k], i = i[k], j = j[k]) : 
  'i','j' must be > 0 and 3 <= n <= 30
Error in qdixon(p = 0.1, n = n[k], i = i[k], j = j[k]) : 
  'i','j' must be > 0 and 3 <= n <= 30
Error in qdixon(p = 0.1, n = n[k], i = i[k], j = j[k]) : 
  'i','j' must be > 0 and 3 <= n <= 30
Error in qdixon(p = 0.1, n = n[k], i = i[k], j = j[k]) : 
  'i','j' must be > 0 and 3 <= n <= 30
Error in qdixon(p = 0.1, n = n[k], i = i[k], j = j[k]) : 
  'i','j' must be > 0 and 3 <= n <= 30
> 
> 
> ###-------- Continuous Distributions ----------
> 
> 
> ###===== Random numbers -- first, just output:
> 
> set.seed(123)
> # .Random.seed <- c(0L, 17292L, 29447L, 24113L)
> n <- 20
> ## for(pre in PDQR) { n <- paste("r",pre,sep=""); cat(n,": "); str(get(n))}
> (Rdixon	  <- rdixon   (n, i = 3, j = 2) )
 [1] 0.30040385 0.12965954 0.25512224 0.09265814 0.06429987 0.45607867
 [7] 0.21538795 0.08848405 0.20785601 0.23888715 0.05424811 0.23998713
[13] 0.16723340 0.20104250 0.39846400 0.08509633 0.31798038 0.46109146
[19] 0.28452955 0.05576998
> 
> (Pdixon	  <- pdixon    (Rdixon, n = n, i = 3, j = 2) )
 [1] 0.28757742 0.78830512 0.40897665 0.88301761 0.94046728 0.04555650
 [7] 0.52810515 0.89241912 0.55143501 0.45661474 0.95683359 0.45333417
[13] 0.67757064 0.57263340 0.10292468 0.89982500 0.24608726 0.04205969
[19] 0.32792071 0.95450377
> 
> ddixon	 (Rdixon, n = n, i = 3, j = 2)
 [1] 2.4579933 2.7916346 2.8784093 2.2880056 1.7404409 0.7188011 3.0878073
 [8] 2.2161871 3.1058468 2.9855537 1.5131004 2.9791777 3.0633774 3.1155399
[15] 1.2998592 2.1556620 2.2608614 0.6766023 2.6223211 1.5486231
> 
> ## Check q*(p*(.)) = identity
> All.eq(Rdixon,	  qdixon	   (Pdixon, n = n, i = 3, j = 2))
[1] "Mean scaled difference: 2.523931e-07"
> 
> ## Same with "upper tail":
> All.eq(Rdixon,	  qdixon	  (1- Pdixon, n = n, i = 3, j = 2, lower=F))
[1] "Mean scaled difference: 2.523931e-07"
> 
> ## Check q*(p* ( log ), log) = identity
> All.eq(Rdixon,	  qdixon	   (log(Pdixon), n = n, i = 3, j = 2,  log=T))
[1] "Mean scaled difference: 2.523931e-07"
> 
> ## same q*(p* (log) log) with upper tail:
> All.eq(Rdixon,	  qdixon	   (log1p(-Pdixon), n = n, i = 3, j = 2, lower=F, log=T))
[1] "Mean scaled difference: 1"
> 
> ## Check log( upper.tail ):
> All.eq(log1p(-Pdixon),	  pdixon	   (Rdixon, n = n, i = 3, j = 2, lower=F, log=T))
[1] TRUE
> 
> ## Check data with test.data from McBane (2006)
> xd <- read.table(file = "test1.ref.output.txt", header = F, skip = 2)
> r <- xd$V1
> All.eq(xd$V3, (p <- pdixon(r, n = 7, i = 2, j = 1, lower.tail = F)))
[1] "Mean scaled difference: 0.0005174333"
> All.eq(xd$V2, (x <- ddixon(r, n = 7, i = 2, j = 1)))
[1] "Mean scaled difference: 0.0006487991"
> 
> xd <- read.table(file = "test2.ref.output.txt", header = T, skip = 1)
> r <- sapply(xd$n, function(n) qdixon(0.1, n, i = 2, j = 1, lower.tail=T))
> All.eq(xd$Rcrit , r)
[1] "Mean scaled difference: 0.0005450815"
> 
> xd <- read.table(file = "test4.ref.output.txt", header = F, skip = 152)
> alpha <- c(0.005, 0.01, 0.02, 0.05, 0.10, 0.20, 0.30, 0.40,
+            0.50, 0.60, 0.70, 0.80, 0.90, 0.95)
> for (n in 6:30) {
+    r <- qdixon(p = alpha, n = n, i = 3, j = 2)
+    o <- unlist(xd[n-5,-1])
+    cat( All.eq(o, r), "\n" )
+ }
names for target but not for current Mean scaled difference: 0.000274439 
names for target but not for current Mean scaled difference: 0.0004528684 
names for target but not for current Mean scaled difference: 0.0004555223 
names for target but not for current Mean scaled difference: 0.0004805726 
names for target but not for current Mean scaled difference: 0.0005007195 
names for target but not for current Mean scaled difference: 0.0004463011 
names for target but not for current Mean scaled difference: 0.000529966 
names for target but not for current Mean scaled difference: 0.0007437093 
names for target but not for current Mean scaled difference: 0.0009783065 
names for target but not for current Mean scaled difference: 0.000693659 
names for target but not for current Mean scaled difference: 0.0008754857 
names for target but not for current Mean scaled difference: 0.0007233611 
names for target but not for current Mean scaled difference: 0.0008745051 
names for target but not for current Mean scaled difference: 0.0008698848 
names for target but not for current Mean scaled difference: 0.0009405565 
names for target but not for current Mean scaled difference: 0.0008511387 
names for target but not for current Mean scaled difference: 0.0007987305 
names for target but not for current Mean scaled difference: 0.001151837 
names for target but not for current Mean scaled difference: 0.001050573 
names for target but not for current Mean scaled difference: 0.001068229 
names for target but not for current Mean scaled difference: 0.0008720606 
names for target but not for current Mean scaled difference: 0.0009406199 
names for target but not for current Mean scaled difference: 0.0009628529 
names for target but not for current Mean scaled difference: 0.0009449196 
names for target but not for current Mean scaled difference: 0.001191661 
> 
> cat("Time elapsed: ", proc.time() - .ptime,"\n")
Time elapsed:  68.577 0.056 69.032 0 0 
> 
